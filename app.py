import streamlit as st
import openseespy.opensees as ops
import opsvis as opsv
import matplotlib.pyplot as plt
import numpy as np
import os
from docx import Document
from docx.shared import Cm
from docx.enum.text import WD_ALIGN_PARAGRAPH

# To handle PDF conversion (works on Windows)
try:
    import win32com.client
    CAN_CONVERT_PDF = True
except ImportError:
    CAN_CONVERT_PDF = False

# --- UI Configuration ---
st.set_page_config(layout="wide", page_title="Portal Frame Modal Analysis")
st.title("AnaStruct: Portal Frame Modal Analysis Tool")
st.write("This tool performs a modal analysis on a 2D portal frame using OpenSees and generates a report.")

# --- Define UI Inputs in the Sidebar ---
with st.sidebar:
    st.header("Structural Parameters")
    
    niveles = st.slider("Number of Levels (Floors)", 1, 10, 3)
    panos = st.slider("Number of Bays", 1, 10, 4)
    longitud_pano = st.number_input("Bay Length (m)", value=6.0, min_value=1.0)
    altura_nivel = st.number_input("Level Height (m)", value=3.0, min_value=1.0)

    st.header("Section and Material Properties")
    m = st.number_input("Nodal Mass (kg)", value=1000.0)
    A = st.number_input("Column Area (A)", value=0.09)
    Ic = st.number_input("Column Inertia (Ic)", value=0.000675, format="%.6f")
    Iv = st.number_input("Beam Inertia (Iv)", value=1.0e12) # Kept high for rigid beam assumption
    E = st.number_input("Modulus of Elasticity (E)", value=2.0e10)

# --- Analysis and Reporting Function ---
@st.cache_data
def run_analysis(niveles, panos, longitud_pano, altura_nivel, m, A, Ic, Iv, E):
    """
    This function contains the core OpenSees analysis and file generation logic.
    """
    if not os.path.exists('assets'):
        os.makedirs('assets')

    # 1. MODEL DEFINITION
    ops.wipe()
    ops.model('basic', '-ndm', 2, '-ndf', 3)

    # 2. NODES AND FIXITIES
    nodos = {}
    contador_nodo = 1
    for i in range(niveles + 1):
        for j in range(panos + 1):
            x = j * longitud_pano
            y = i * altura_nivel
            if i == 0:
                ops.node(contador_nodo, x, y)
                ops.fix(contador_nodo, 1, 1, 1)
            else:
                ops.node(contador_nodo, x, y, '-mass', m, m, 0)
            nodos[(i, j)] = contador_nodo
            contador_nodo += 1

    # 3. ELEMENTS (Columns and Beams)
    geomLinear = 1
    ops.geomTransf('Linear', geomLinear)
    contador_elemento = 1
    
    for i in range(niveles):
        for j in range(panos + 1):
            nodo_inferior = nodos[(i, j)]
            nodo_superior = nodos[(i + 1, j)]
            factor_inercia = (niveles - i) / niveles
            ops.element('elasticBeamColumn', contador_elemento, nodo_inferior, nodo_superior, A, E, factor_inercia * Ic, geomLinear)
            contador_elemento += 1
            
    for i in range(1, niveles + 1):
        for j in range(panos):
            nodo_izq = nodos[(i, j)]
            nodo_der = nodos[(i, j + 1)]
            ops.element('elasticBeamColumn', contador_elemento, nodo_izq, nodo_der, A, E, Iv, geomLinear)
            contador_elemento += 1

    opsv.plot_model(fig_wi_he=(12, 9))
    plt.title('Parametric Structure', fontsize=14, fontweight='bold')
    structure_path = 'assets/estructura_parametrica.png'
    plt.savefig(structure_path)
    plt.close()

    # 4. EIGENVALUE ANALYSIS
    NumModos = niveles
    try:
        eigen_values = np.array(ops.eigen("-genBandArpack", NumModos))
        omega = eigen_values**0.5
        Tmodes = 2 * np.pi / omega
    except Exception as e:
        return None, None, str(e)

    # 5. PLOT MODE SHAPES
    mode_shape_paths = []
    fmt_model = {'color': 'b', 'linestyle': '-', 'linewidth': 2}
    fmt_undefo = {'color': 'g', 'linestyle': '--', 'linewidth': 0.7}
    for i in range(NumModos):
        opsv.plot_mode_shape(i + 1, endDispFlag=0, fmt_undefo=fmt_undefo, fmt_defo=fmt_model)
        plt.title(f"$T_{i+1}$: {Tmodes[i]:.4f} sec", fontweight='bold')
        path = f'assets/modo_{i+1}.png'
        plt.savefig(path)
        plt.close()
        mode_shape_paths.append(path)

    return Tmodes, mode_shape_paths, None

def create_report(niveles, altura_nivel, panos, longitud_pano, NumModos, Tmodes, mode_shape_paths):
    """Generates the DOCX report."""
    document = Document()
    titulo = document.add_heading('ANASTRUCT CALCULATION REPORT', 0)
    titulo.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    p = document.add_paragraph('Report generated by ')
    p.add_run('AnaStruct Python Tool. ').bold = True
    
    document.add_heading('STRUCTURE GEOMETRY', level=1)
    document.add_picture('assets/estructura_parametrica.png', width=Cm(15))
    
    document.add_heading('Structure Data', level=2)
    document.add_paragraph(f'Number of Levels = {niveles}', style='List Bullet')
    
    document.add_heading('VIBRATION MODES', level=1)
    for i in range(NumModos):
        document.add_heading(f'Vibration Mode {i + 1}', level=2)
        document.add_paragraph(f'Period T{i + 1} = {Tmodes[i]:.4f} sec', style='List Bullet')
        document.add_picture(mode_shape_paths[i], width=Cm(15))
        
    docx_path = "assets/Calculation_Report.docx"
    document.save(docx_path)
    return docx_path

# --- Main App Logic ---
if st.sidebar.button("Run Analysis", type="primary"):
    Tmodes, mode_shape_paths, error = run_analysis(
        niveles, panos, longitud_pano, altura_nivel, m, A, Ic, Iv, E
    )
    
    if error:
        st.error(f"An error occurred: {error}")
    else:
        st.success("Analysis complete!")
        
        st.header("Analysis Results")
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Structural Model")
            st.image('assets/estructura_parametrica.png')
            
        with col2:
            st.subheader("Calculated Periods")
            for i, T in enumerate(Tmodes):
                st.write(f"**T{i+1}:** {T:.4f} sec")
        
        st.header("Mode Shapes")
        cols = st.columns(len(mode_shape_paths))
        for i, path in enumerate(mode_shape_paths):
            with cols[i]:
                st.image(path, caption=f"Mode {i+1}")

        st.header("Download Report")
        docx_path = create_report(niveles, altura_nivel, panos, longitud_pano, niveles, Tmodes, mode_shape_paths)
        
        with open(docx_path, "rb") as file:
            st.download_button(
                label="Download Report (DOCX)",
                data=file,
                file_name="Calculation_Report.docx"
            )

        if CAN_CONVERT_PDF:
            try:
                word = win32com.client.Dispatch('Word.Application')
                doc = word.Documents.Open(os.path.abspath(docx_path))
                pdf_path = os.path.abspath("assets/Calculation_Report.pdf")
                doc.SaveAs(pdf_path, FileFormat=17)
                doc.Close()
                word.Quit()

                with open(pdf_path, "rb") as file:
                    st.download_button(
                        label="Download Report (PDF)",
                        data=file,
                        file_name="Calculation_Report.pdf"
                    )
            except Exception as e:
                st.warning(f"Could not convert to PDF: {e}")
