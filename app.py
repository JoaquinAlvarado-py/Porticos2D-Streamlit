# --- Configuración de Streamlit y gráficos (amigable con headless) ---
import streamlit as st
import matplotlib
matplotlib.use("Agg")  # importante para Streamlit Cloud (entorno sin GUI)
import matplotlib.pyplot as plt

import numpy as np
import os
from docx import Document
from docx.shared import Cm
from docx.enum.text import WD_ALIGN_PARAGRAPH

# Importaciones seguras de OpenSeesPy y OpsVis
OPS_OK = True
OPSVIS_OK = True
OPS_IMPORT_ERROR = ""
OPSVIS_IMPORT_ERROR = ""

try:
    import openseespy.opensees as ops
except Exception as e:
    OPS_OK = False
    OPS_IMPORT_ERROR = str(e)

try:
    import opsvis as opsv
except Exception as e:
    OPSVIS_OK = False
    OPSVIS_IMPORT_ERROR = str(e)

# Conversión a PDF solo en Windows (inofensivo en Linux)
try:
    import win32com.client  # type: ignore
    CAN_CONVERT_PDF = True
except Exception:
    CAN_CONVERT_PDF = False

st.set_page_config(page_title="Pórticos 2D – Modos", layout="centered")

def run_analysis(niveles, altura_nivel, panos, luz_viga, longitud_pano,
                 m, E, A_col, Iz_col, A_viga, Iz_viga):
    """
    Análisis modal con OpenSeesPy.
    Unidades: m–kg–s (E en Pa, masas en kg, áreas en m², inercias en m⁴).
    Retorna: (Tmodes (np.ndarray), mode_shape_paths (list[str]), error_msg (str|None))
    """
    if not OPS_OK:
        return None, None, (
            "OpenSeesPy no está disponible en este entorno.\n\n"
            f"Detalle de importación: {OPS_IMPORT_ERROR}"
        )

    os.makedirs('assets', exist_ok=True)

    # 1) MODELO
    try:
        ops.wipe()
        ops.model('basic', '-ndm', 2, '-ndf', 3)
    except Exception as e:
        return None, None, f"Error iniciando el modelo OpenSees: {e}"

    # 2) NODOS Y APOYOS
    nodos = {}
    contador_nodo = 1
    for i in range(niveles + 1):
        for j in range(panos + 1):
            # Usamos la luz de viga para espaciar en X
            x = j * luz_viga
            y = i * altura_nivel
            if i == 0:
                ops.node(contador_nodo, x, y)
                ops.fix(contador_nodo, 1, 1, 1)
            else:
                # masa en kg en DOF x,y (masa rotacional = 0)
                ops.node(contador_nodo, x, y, '-mass', m, m, 0.0)
            nodos[(i, j)] = contador_nodo
            contador_nodo += 1

    # 3) ELEMENTOS (columnas y vigas)
    geomLinear = 1
    ops.geomTransf('Linear', geomLinear)

    # Columnas
    for i in range(niveles):
        for j in range(panos + 1):
            ni = nodos[(i, j)]
            nj = nodos[(i + 1, j)]
            ops.element('elasticBeamColumn', 1000 + i * (panos + 1) + j,
                        ni, nj, A_col, E, Iz_col, geomLinear, '-mass', 0.0)

    # Vigas
    for i in range(1, niveles + 1):
        for j in range(panos):
            ni = nodos[(i, j)]
            nj = nodos[(i, j + 1)]
            ops.element('elasticBeamColumn', 2000 + (i - 1) * panos + j,
                        ni, nj, A_viga, E, Iz_viga, geomLinear, '-mass', 0.0)

    # 4) AUTOVALORES
    NumModos = max(1, niveles)
    try:
        eigen_values = np.array(ops.eigen("-genBandArpack", NumModos), dtype=float)
        # Proteger contra valores <= 0
        eigen_values = np.where(eigen_values > 0, eigen_values, np.nan)
        omega = np.sqrt(eigen_values)
        Tmodes = 2 * np.pi / omega
    except Exception as e:
        return None, None, f"Error en el análisis modal (eigen): {e}"

    # 5) FORMAS MODALES (si opsvis está disponible)
    mode_shape_paths = []
    if OPSVIS_OK:
        fmt_model = {'color': 'b', 'linestyle': '-', 'linewidth': 2}
        fmt_undefo = {'color': 'g', 'linestyle': '--', 'linewidth': 0.7}
        for i in range(NumModos):
            try:
                opsv.plot_mode_shape(i + 1, endDispFlag=0,
                                     fmt_undefo=fmt_undefo, fmt_defo=fmt_model)
                plt.title(f"$T_{i+1}$: {Tmodes[i]:.4f} s", fontweight='bold')
                path = f'assets/modo_{i+1}.png'
                plt.savefig(path, bbox_inches='tight', dpi=160)
                plt.close()
                mode_shape_paths.append(path)
            except Exception as e:
                # Si falla un modo, cerramos figura y continuamos
                plt.close()
                mode_shape_paths.append("")
    # Si no hay opsvis, devolvemos lista vacía (la UI avisa)
    return Tmodes, mode_shape_paths, None


def create_report(niveles, altura_nivel, panos, luz_viga, longitud_pano,
                  NumModos, Tmodes, mode_shape_paths,
                  m, E, A_col, Iz_col, A_viga, Iz_viga):
    """Genera el reporte DOCX (unidades m–kg–s) y retorna la ruta."""
    document = Document()
    titulo = document.add_heading('ANASTRUCT CALCULATION REPORT', 0)
    titulo.alignment = WD_ALIGN_PARAGRAPH.CENTER

    p = document.add_paragraph('Report generated by ')
    p.add_run('AnaStruct Python Tool. ').bold = True
    p.add_run('Modal analysis of a 2D portal frame.\n')

    # Nota de unidades
    document.add_paragraph("Units: m – kg – s; E in Pa (N/m²).")

    document.add_heading('Inputs', level=1)
    table = document.add_table(rows=0, cols=2)
    def row(k, v):
        r = table.add_row().cells
        r[0].text = str(k)
        r[1].text = str(v)

    # Geometría
    row("Levels [-]", niveles)
    row("Level height [m]", altura_nivel)
    row("Bays [-]", panos)
    row("Beam span [m]", luz_viga)
    row("Bay length (admin) [m]", longitud_pano)  # si lo usas con otro fin, queda documentado

    # Propiedades mecánicas y masa (m–kg–s)
    row("Mass per node [kg]", m)
    row("E [Pa]", E)
    row("A column [m²]", A_col)
    row("Iz column [m⁴]", Iz_col)
    row("A beam [m²]", A_viga)
    row("Iz beam [m⁴]", Iz_viga)

    row("Number of modes [-]", NumModos)

    document.add_heading('Results', level=1)
    for i in range(NumModos):
        par = document.add_paragraph()
        par.add_run(f"T{i+1} = ").bold = True
        par.add_run(f"{Tmodes[i]:.4f} s")

    document.add_heading('Mode Shapes', level=1)
    for i, pth in enumerate(mode_shape_paths, start=1):
        document.add_paragraph(f"Mode {i}")
        try:
            if pth and os.path.exists(pth):
                document.add_picture(pth, width=Cm(12))
            else:
                document.add_paragraph("(Imagen no disponible en este entorno)")
        except Exception:
            document.add_paragraph(f"(No se pudo insertar la imagen: {pth})")

    os.makedirs('assets', exist_ok=True)
    docx_path = os.path.abspath("assets/Calculation_Report.docx")
    document.save(docx_path)
    return docx_path


# --- INTERFAZ ---
st.title("Pórticos 2D – Análisis Modal (OpenSeesPy)")
st.caption("Unidades: m – kg – s. E en Pa (N/m²). Masas en kg.")

with st.sidebar:
    st.header("Parámetros")
    # Sin límite superior (solo mínimos lógicos)
    niveles = st.number_input("Niveles", min_value=1, value=3, step=1)
    altura_nivel = st.number_input("Altura por nivel [m]", min_value=0.0, value=3.0, step=0.1, format="%.2f")
    panos = st.number_input("Paños", min_value=1, value=2, step=1)
    longitud_pano = st.number_input("Longitud de paño [m]", min_value=0.0, value=5.0, step=0.1, format="%.2f")
    luz_viga = st.number_input("Luz de viga [m]", min_value=0.0, value=6.0, step=0.1, format="%.2f")

    st.subheader("Propiedades y masa")
    m = st.number_input("Masa nodal [kg]", min_value=0.0, value=1000.0, step=10.0, format="%.1f")
    E = st.number_input("E [Pa]", min_value=1e4, value=2.0e10, step=1e9, format="%.0f")  # por defecto 20 GPa (ajústalo si usas acero)
    A_col = st.number_input("A columna [m²]", min_value=0.0, value=0.09, step=0.001, format="%.3f")
    Iz_col = st.number_input("Iz columna [m⁴]", min_value=0.0, value=0.000675, step=0.000001, format="%.6f")
    A_viga = st.number_input("A viga [m²]", min_value=0.0, value=0.09, step=0.001, format="%.3f")
    Iz_viga = st.number_input("Iz viga [m⁴]", min_value=0.0, value=1.0e13, step=1.0e10, format="%.0f")

    st.markdown("---")
    if OPS_OK:
        st.success("OpenSeesPy ✓ disponible")
    else:
        st.error("OpenSeesPy no está disponible en este runtime.\n"
                 "Revisa versiones compatibles en requirements.txt y runtime.txt.")
    if not OPSVIS_OK:
        st.info("OpsVis no está disponible: las imágenes de modos podrían no mostrarse.")

    run = st.button("Calcular")

if run:
    with st.spinner("Ejecutando análisis modal..."):
        Tmodes, mode_shape_paths, err = run_analysis(
            int(niveles), float(altura_nivel), int(panos),
            float(luz_viga), float(longitud_pano),
            float(m), float(E), float(A_col), float(Iz_col), float(A_viga), float(Iz_viga)
        )

    if err:
        st.error(err)
    else:
        # 1) Períodos
        st.subheader("Períodos")
        for i, T in enumerate(Tmodes, start=1):
            st.write(f"**T{i} = {T:.4f} s**")

        # 2) Formas Modales
        st.subheader("Formas Modales")
        if OPSVIS_OK and any(mode_shape_paths):
            cols = st.columns(2)
            for i, pth in enumerate(mode_shape_paths):
                if pth and os.path.exists(pth):
                    with cols[i % 2]:
                        st.image(pth, caption=f"Modo {i+1}", use_column_width=True)
        else:
            st.info("Las formas modales no están disponibles en este entorno (opsvis no instalado o sin gráficos).")

        # 3) Reporte DOCX (y PDF en Windows)
        docx_path = create_report(
            int(niveles), float(altura_nivel), int(panos),
            float(luz_viga), float(longitud_pano),
            len(Tmodes), Tmodes, mode_shape_paths,
            float(m), float(E), float(A_col), float(Iz_col), float(A_viga), float(Iz_viga)
        )
        with open(docx_path, "rb") as f:
            st.download_button("Descargar Reporte (DOCX)", f, file_name="Calculation_Report.docx")

        if CAN_CONVERT_PDF:
            try:
                word = win32com.client.Dispatch("Word.Application")
                doc = word.Documents.Open(os.path.abspath(docx_path))
                pdf_path = os.path.abspath("assets/Calculation_Report.pdf")
                doc.SaveAs(pdf_path, FileFormat=17)
                doc.Close()
                word.Quit()
                with open(pdf_path, "rb") as f:
                    st.download_button("Descargar Reporte (PDF)", f, file_name="Calculation_Report.pdf")
            except Exception as e:
                st.warning(f"No se pudo convertir a PDF automáticamente: {e}")

else:
    st.info("Configura parámetros en la barra lateral y presiona **Calcular**.")
